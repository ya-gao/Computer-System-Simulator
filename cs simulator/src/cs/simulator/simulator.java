/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cs.simulator;

/**
 *
 * @author dilipvarma
 */

import Registers.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class simulator extends javax.swing.JFrame {

    /**
     * Creates new form simulator
     
     */
    static int l1=0;
    String opcode,reg,ireg,mem,indirectadd,q;
    int opcode1,reg1,ireg1,mem1,indirectadd1,q1;
    int EA;
    Registers r=new Registers();
    static int m[]=new int[2048];
    
    public simulator() 
    { 
        initComponents();       // It is used to create components
       
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ipl = new javax.swing.JButton();
        run = new javax.swing.JButton();
        singlestep = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        halt = new javax.swing.JButton();
        r0 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        r1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        r2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        r3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        pc = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        mar = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        mbr = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        mfr = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cc = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        ixr1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        ixr2 = new javax.swing.JTextField();
        ixr3 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        ir = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        Log = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ipl.setText("IPL");
        ipl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iplActionPerformed(evt);
            }
        });

        run.setText("run");
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        singlestep.setText("singlestep");
        singlestep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singlestepActionPerformed(evt);
            }
        });

        input.setColumns(20);
        input.setRows(5);
        jScrollPane1.setViewportView(input);

        jLabel1.setText("R0");

        halt.setText("Halt");

        jLabel2.setText("R1");

        jLabel3.setText("R2");

        jLabel4.setText("R3");

        r3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r3ActionPerformed(evt);
            }
        });

        jLabel5.setText("PC");

        pc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcActionPerformed(evt);
            }
        });

        jLabel6.setText("MAR");

        jLabel7.setText("MBR");

        jLabel8.setText("MFR");

        jLabel9.setText("CC");

        jLabel10.setText("IXR1");

        jLabel11.setText("IXR2");

        jLabel12.setText("IXR3");

        jLabel13.setText("IR");

        ir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                irActionPerformed(evt);
            }
        });

        jLabel15.setText("Input");

        Log.setText("Log");

        log.setEditable(false);
        log.setColumns(20);
        log.setRows(5);
        jScrollPane2.setViewportView(log);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(r2)
                    .addComponent(r3)
                    .addComponent(pc)
                    .addComponent(mar)
                    .addComponent(mbr)
                    .addComponent(mfr)
                    .addComponent(cc)
                    .addComponent(ixr1)
                    .addComponent(r0)
                    .addComponent(ixr3)
                    .addComponent(ir)
                    .addComponent(ixr2))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(Log)
                    .addComponent(jScrollPane2)))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(ipl, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(halt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(run, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(singlestep, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(halt, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .addComponent(run, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(singlestep, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ipl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(r0, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(r1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(r2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(r3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(pc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(mar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Log))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(mbr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(mfr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(cc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ixr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ixr2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(ixr3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(ir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void r3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_r3ActionPerformed

    private void pcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pcActionPerformed

    private void irActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_irActionPerformed
               
    private void iplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iplActionPerformed
        // When the button ipl is clicked on the simulator the program gets loaded with some instructions specified//
        input.setText("LDA 3,1,0,11" +"\n"+"LDR 1,2,0,12"+"\n"+"LDX 0,2,0,13"+"\n"+"STR 2,1,0,14"+"\n"+"STX 1,1,0,15");
        pc.setText(r.getPC());
        m[11]=21;
        m[12]=22;
        m[13]=23;
        m[14]=24;
        m[15]=25;
        m[16]=26;
        log.setText("ipl complete"+"\n");
        
    }//GEN-LAST:event_iplActionPerformed

    private void singlestepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singlestepActionPerformed
        // This action is performed whenever user presses singlestep button on the simulator
        // This is used to handle multiple instructions by executing one instruction at a time 
        String z[]= (input.getText()).split("\n"); // it is used to capture the input text and divide into an array
           
        if(l1<z.length)
        {
           String instruction=z[l1];
                                                            // Decoding begins
        
                opcode = instruction.substring(0,3);      //spliting the string into sub parts using substring method
	        reg = instruction.substring(4,5);
               
	        ireg = instruction.substring(6,7);
                
	         mem = instruction.substring(8,9);
                
	         indirectadd = instruction.substring(10);
                
                
        switch (opcode) {                       //Checking for opcode value and setting the value to it because opcode values are predefined 
            case "LDR":
                opcode = "000001";
                break;
            case "STR":
                opcode = "000010";
                break;
            case "LDA":
                opcode = "000011";
                break;
            case "LDX":
                opcode = "101001";
                break;
            case "STX":
                opcode = "101010";
                break;
            default:
                break;
        }

        switch (reg) {                      //Checking for register value 
            case "0":
                reg = "00";
                break;
            case "1":
                reg = "01";
                break;
            case "2":
                reg = "10";
                break;
            case "3":
                reg = "11";
                break;
            default:
                break;
        }
        switch (ireg) {                         // checking for index register value
            case "0":
                ireg = "00";
                break;
            case "1":
                ireg = "01";
                break;
            case "2":
                ireg = "10";
                break;
            case "3":
                ireg = "11";
                break;
            default:
                break;
        }
                
         int j= Integer.parseInt(indirectadd);
        
          q= Integer.toBinaryString(j);
         int j1= Integer.parseInt(q);
         
         int count=0;
         while(j1>0)                         
         {
             j1=j1/10;
             count=count+1;
             
         }
         int count1=5-count;
         while(count1!=0)
         {
             q=0+q;
             count1--;
         }
                

	        String str =opcode+ reg + ireg + mem + q;   // Captured the whole string i.e. instruction and converted it into binary format
                int dec=Integer.parseInt(str,2);
                q1=Integer.parseInt(q,2);// address
                ireg1=Integer.parseInt(ireg,2);// index register value
                reg1=Integer.parseInt(reg,2);// register value
              
                if(opcode=="000001") //ldr(load register from memory i.e. we fetch the contents of memory location given in the instruction and store it in the register specified in the instruction    r=m[]
                {
                    r.setGPR(reg1, String.valueOf(m[q1]));      //setting the value of register
                   
                    if(reg1==0)
                        {
                            r0.setText(r.getGPR(reg1));         // displaying the register 0 value after ldr function
                        }
                    else if(reg1==1)
                        {
                          r1.setText(r.getGPR(reg1));           // displaying the register 1 value after ldr function
                         }
                    else if(reg1==2)
                        {
                           r2.setText(r.getGPR(reg1));          // displaying the register 2 value after ldr function
                        }
                    else if(reg1==3)
                        {
                            r3.setText(r.getGPR(reg1));         // displaying the register 3 value after ldr function
                         }
                    
                }
                else if(opcode=="000011") //lda (load register with address i.e. r=address)
                {
                    r.setGPR(reg1, String.valueOf(q1));         //setting the value of register
                    if(reg1==0) 
                        {
                            r0.setText(r.getGPR(reg1));
                        }
                    else if(reg1==1)
                        {
                          r1.setText(r.getGPR(reg1));
                         }
                    else if(reg1==2)
                        {
                           r2.setText(r.getGPR(reg1));
                        }
                    else if(reg1==3)
                        {
                            r3.setText(r.getGPR(reg1));
                         }
                }
                else if(opcode=="101001")//ldx(Load index register from memory i.e. ir=m[addr] stroing the index register value with the value associated with given address in the instruction
                {
                    r.setXR(ireg1, String.valueOf(m[q1]));  //setting index register value
                   if(ireg1==0)
                        {
                            //will use this for future purpose
                        }
                    else if(ireg1==1)
                        {
                          ixr1.setText(r.getXR(ireg1));
                          
                         }
                    else if(ireg1==2)
                        {
                           ixr2.setText(r.getXR(ireg1));
                        
                        }
                    else if(ireg1==3)
                        {
                            ixr3.setText(r.getXR(ireg1));
                            
                         }
                }
                else if(opcode=="000010")//str(Store register to memory i.e. m[]=c[r] fetch the contents of the resgister and store it to the memory
                {
                    m[q1]=Integer.parseInt(r.getGPR(reg1)); //storing data into memory
                     if(reg1==0)
                        {
                            r0.setText(r.getGPR(reg1));
                        }
                    else if(reg1==1)
                        {
                          r1.setText(r.getGPR(reg1));
                         }
                    else if(reg1==2)
                        {
                           r2.setText(r.getGPR(reg1));
                        }
                    else if(reg1==3)
                        {
                            r3.setText(r.getGPR(reg1));
                         }
                   
                }
                else if(opcode=="101010")//stx i.e. store index register to memory m[]=c[ir] fetch the contents of index register to the memory
                {
                    m[q1]=Integer.parseInt(r.getXR(ireg1)); //storing the data into memory
                    if(ireg1==0)
                        {
                           // Do nothing for now( for future purpose)
                        }
                    else if(ireg1==1)
                        {
                          ixr1.setText(r.getXR(ireg1));
                          
                         }
                    else if(ireg1==2)
                        {
                           ixr2.setText(r.getXR(ireg1));
                        
                        }
                    else if(ireg1==3)
                        {
                            ixr3.setText(r.getXR(ireg1));
                            
                         }
                    
                }
                
                r.setMAR(r.getPC());                        //setting MAR value
                mar.setText(r.getMAR());                    //Displaying MAR value
                r.setMBR(String.valueOf(dec));              //setting MBR value
                mbr.setText(r.getMBR());                    //Displaying MBR value
                r.setIR(String.valueOf(dec));               //setting IR value
                ir.setText(r.getIR());                      //Displaying IR value
                int t= Integer.parseInt(r.getPC())+1;       //Whenever the the next instruction is ready pc value will increment by one
                r.setPC(String.valueOf(t));
                pc.setText(r.getPC());
               
        log.setText(log.getText()+"Register value(R"+reg1+")"+":");     //Log is used to display the description of what is happening to the values of MAR,MBR,IR,PC whenever we execute a instruction
        log.setText(log.getText()+""+r.getGPR(reg1));                     
        log.setText(log.getText()+"\n");
        log.setText(log.getText()+"MAR value:");        
        log.setText(log.getText()+""+r.getMAR());
        log.setText(log.getText()+"\n");
        log.setText(log.getText()+"MBR value:");
        log.setText(log.getText()+""+r.getMBR());
        log.setText(log.getText()+"\n");
        log.setText(log.getText()+"IR value:");
        log.setText(log.getText()+""+r.getIR());
        log.setText(log.getText()+"\n");
        log.setText(log.getText()+"PC value:");
        log.setText(log.getText()+""+r.getPC());
        log.setText(log.getText()+"\n");        
        
        l1++;
        }
        

        
    }//GEN-LAST:event_singlestepActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        // This function/action is used to run multiple instructions at a time
        String z[]= (input.getText()).split("\n");
           int l=0;
        while(l<z.length)
        {
           String instruction=z[l];      //Now we are running and updating values at a time
          
        
                opcode = instruction.substring(0,3);
	        reg = instruction.substring(4,5);
              
	        ireg = instruction.substring(6,7);
                
	         mem = instruction.substring(8,9);
                
	         indirectadd = instruction.substring(10);
                
                                                        
        switch (opcode) {//Checking for opcode value and setting the value to it because opcode values are predefined
            case "LDR":
                opcode = "000001";
                break;
            case "STR":
                opcode = "000010";
                break;
            case "LDA":
                opcode = "000011";
                break;
            case "LDX":
                opcode = "101001";
                break;
            case "STX":
                opcode = "101010";
                break;
            default:
                break;
        }

        switch (reg) {                      //Checking for register value
            case "0":
                reg = "00";
                break;
            case "1":
                reg = "01";
                break;
            case "2":
                reg = "10";
                break;
            case "3":
                reg = "11";
                break;
            default:
                break;
        }
        switch (ireg) {                     //Checking for indirect register
            case "0":
                ireg = "00";
                break;
            case "1":
                ireg = "01";
                break;
            case "2":
                ireg = "10";
                break;
            case "3":
                ireg = "11";
                break;
            default:
                break;
        }
                
         int j= Integer.parseInt(indirectadd);
        
          q= Integer.toBinaryString(j);
         int j1= Integer.parseInt(q);
         
         int count=0;
         while(j1>0)
         {
             j1=j1/10;
             count=count+1;
             
         }
         int count1=5-count;
         while(count1!=0)
         {
             q=0+q;
             count1--;
         }
               

	        String str =opcode+ reg + ireg + mem + q; //captured string in binary format
                int dec=Integer.parseInt(str,2);
                q1=Integer.parseInt(q,2);// address
                ireg1=Integer.parseInt(ireg,2);// index register value
                reg1=Integer.parseInt(reg,2);// register value
               
                if(opcode=="000001") //ldr(load register from memory i.e. we fetch the contents of memory location given in the instruction and store it in the register specified in the instruction 
                {
                    r.setGPR(reg1, String.valueOf(m[q1]));
                  
                    if(reg1==0)
                        {
                            r0.setText(r.getGPR(reg1));
                        }
                    else if(reg1==1)
                        {
                          r1.setText(r.getGPR(reg1));
                         }
                    else if(reg1==2)
                        {
                           r2.setText(r.getGPR(reg1));
                        }
                    else if(reg1==3)
                        {
                            r3.setText(r.getGPR(reg1));
                         }
                    
                }
                else if(opcode=="000011") //lda // load register with address
                {
                    r.setGPR(reg1, String.valueOf(q1));
                    if(reg1==0)
                        {
                            r0.setText(r.getGPR(reg1));
                        }
                    else if(reg1==1)
                        {
                          r1.setText(r.getGPR(reg1));
                         }
                    else if(reg1==2)
                        {
                           r2.setText(r.getGPR(reg1));
                        }
                    else if(reg1==3)
                        {
                            r3.setText(r.getGPR(reg1));
                         }
                }
                else if(opcode=="101001")//ldx
                {
                    r.setXR(ireg1, String.valueOf(m[q1]));
                   if(ireg1==0)
                        {
                          
                        }
                    else if(ireg1==1)
                        {
                          ixr1.setText(r.getXR(ireg1));
                         }
                    else if(ireg1==2)
                        {
                           ixr2.setText(r.getXR(ireg1));
                        }
                    else if(ireg1==3)
                        {
                            ixr3.setText(r.getXR(ireg1));
                         }
                }
                else if(opcode=="000010")//str // m[]=c[r]
                {
                    m[q1]=Integer.parseInt(r.getGPR(reg1));
                   
                }
                else if(opcode=="101010")//stx// m[]=c[ir]
                {
                    
                    
                    m[q1]=Integer.parseInt(r.getXR(ireg1));
                    
                }
                
                r.setMAR(r.getPC());                //setting MAR value
                mar.setText(r.getMAR());            //Displaying MAR value
                r.setMBR(String.valueOf(dec));      //setting MBR value
                mbr.setText(r.getMBR());            //Displaying MBR value
                r.setIR(String.valueOf(dec));       //setting IR value
                ir.setText(r.getIR());              //Displaying IR value
                int t= Integer.parseInt(r.getPC())+1;
                r.setPC(String.valueOf(t));
                pc.setText(r.getPC());
                
        
                
            
        
        l++;
        }
        log.setText(log.getText()+"Register value(R"+reg1+")"+":");
        log.setText(log.getText()+""+r.getGPR(reg1));
        log.setText(log.getText()+"\n");
        log.setText(log.getText()+"MAR value:");
        log.setText(log.getText()+""+r.getMAR());
        log.setText(log.getText()+"\n");
        log.setText(log.getText()+"MBR value:");
        log.setText(log.getText()+""+r.getMBR());
        log.setText(log.getText()+"\n");
        log.setText(log.getText()+"IR value:");
        log.setText(log.getText()+""+r.getIR());
        log.setText(log.getText()+"\n");
        log.setText(log.getText()+"PC value:");
        log.setText(log.getText()+""+r.getPC());
        log.setText(log.getText()+"\n");
        
 



                
        
     
    }//GEN-LAST:event_runActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new simulator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Log;
    private javax.swing.JTextField cc;
    public javax.swing.JButton halt;
    private javax.swing.JTextArea input;
    public javax.swing.JButton ipl;
    private javax.swing.JTextField ir;
    private javax.swing.JTextField ixr1;
    private javax.swing.JTextField ixr2;
    private javax.swing.JTextField ixr3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea log;
    private javax.swing.JTextField mar;
    private javax.swing.JTextField mbr;
    private javax.swing.JTextField mfr;
    private javax.swing.JTextField pc;
    private javax.swing.JTextField r0;
    private javax.swing.JTextField r1;
    private javax.swing.JTextField r2;
    private javax.swing.JTextField r3;
    public javax.swing.JButton run;
    public javax.swing.JButton singlestep;
    // End of variables declaration//GEN-END:variables
}
